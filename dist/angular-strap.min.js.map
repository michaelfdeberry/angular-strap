{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["placement","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","bsCompilerService","$inject","$http","get","angular","module","defaults","this","animation","data","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","contentEl","findElement","outerHTML","contentTemplate","all","templateEl","removeAttr","html","templates","replace","next","remove","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","$scope","$matches","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$$rAF","$render","$emit","prefixEvent","parentScope","length","l","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$timeout","$element","$onMouseDown","hide","on","$onKeyDown","TypeaheadFactory","array","isFunction","$$phase","$window","body","$filter","expression","directive","results","restrict","require","falseValueRegExp","attr","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","isVisible","slice","$formatters","displayValue","push","modelValue","selected","val","destroy","isDefined","label","toString","$on","target","title","type","autoClose","bsEnabled","viewport","selector","padding","String","htmlReplaceRegExp","$body","$tooltip","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","leave","$isShown","blur","tipElement","nodeName","triggers","toggle","unbindTriggerEvents","enter","off","bindKeyboardEvents","$onKeyUp","isTouch","$onFocusElementMouseDown","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","rect","width","elRect","height","p","top","left","dimensions","offset","el","scroll","isBody","documentElement","getCalculatedOffset","position","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","parseInt","using","props","css","isNaN","right","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","tipScope","$destroy","$options","$promise","$bsCompiler","$new","$rootScope","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","promise","init","tipContainer","bindTriggerEvents","isElement","destroyTipElement","hoverState","parent","after","lastChild","display","visibility","clonedElement","$applyPlacement","version","minor","prefixClass","$animate","prepend","setTimeout","focus","_blur","elementPosition","autoPlace","autoToken","viewportPosition","originalPlacement","indexOf","tipHeight","removeClass","addClass","tipPosition","applyPlacement","tipWidth","$location","transclusion","dataTarget","hasOwnProperty","tooltip","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","minute","$setViewValue","keep","Date","setHours","setMinutes","setSeconds","hours","midIndex","$isSelected","disabled","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","sepLength","lateralMove","count","minutesLength","selectRange","hoursLength","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","prop","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","getTimeForAttribute","parse","timezoneOffsetAdjust","NaN","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","splice","$setActive","name","fn","$pane","$tab","transclude","postLink","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","b","a","$apply","$getIndex","dataMultiple","inputEl","isArray","join","$isEmpty","spies","$document","windowEl","debounce","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","$trackedElements","sortedElements","activeTarget","debouncedCheckPosition","viewportHeight","throttledCheckPosition","debouncedCheckOffsets","scrollTop","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","activeElement","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","querySelectorAll","child","content","$popover","PopoverFactory","requestAnimationFrame","popover","bsPopover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","bodyElement","ModalFactory","$modal","modalElement","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","destroyModalElement","modalScope","$show","bottom","z-index","defaultPrevented","backdropAnimation","bindBackdropEvents","which","$root","query","bsModal","modal","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","$values","displayFn","valueName","valueFn","ParseOptionsFactory","groupByFn","keyName","jqLite","currentStyle","window","getComputedStyle","extra","boxRect","getBoundingClientRect","style","offsetHeight","docElement","ownerDocument","curPosition","curLeft","curCSSTop","pageYOffset","clientTop","pageXOffset","scrollLeft","clientLeft","curCSSLeft","calculatePosition","curTop","curOffset","curElem","call","offsetParentRect","offsetParentElement","offsetParent","offsetWidth","outer","func","immediate","factory","context","args","cancel","callNow","leading","trailing","wait","year","$localeProvider","milliseconds","ParseDate","prototype","isNumeric","n","isFinite","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","noop","toDate","regExpMap","sss","$locale","dateFilter","mm","keys","setFnMap","clonedFormat","search","v","sortedMap","regExpForFormat","re","text","Object","escapeReservedSymbols","regex","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","setMap","setMapForFormat","$format","baseDate","formatRegex","formatSetMap","exec","fromDate","getDate","today","getDateForAttribute","substr","daylightSavingAdjust","undo","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","updateSelected","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","daySplit","arr","mod","arrays","size","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDate","getDay","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","firstMonth","months","lastDate","actualMonth","firstYear","years","actualYear","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","controllers","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","equals","checked","bind","toggleClass","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","setWidth","initialAffixTop","getRequiredAffixClass","unpin","getScrollTop","scrollHeight","getScrollHeight","initialOffsetTop","offsetBottom","affixed","$parseOffsets","affix","elementHeight","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function() {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length,\r\n            i = l;\r\n          if (!l) return;\r\n          for (i = l; i--;) {\r\n            if (scope.$matches[i].value === value) break;\r\n          }\r\n          if (i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function() {\r\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect)\r\n            $typeahead.activate(-1);\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function($filter) {\r\n    return function(array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function(results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      } else {\r\n        return $filter('filter')(array, expression, comparator);\r\n      }\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'false');\r\n\r\n        // Build proper bsOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) bsOptions += ':' + comparator;\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function(values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              var isVisible = typeahead.$isVisible();\r\n              isVisible && typeahead.update(values);\r\n              // Do not re-queue an update if a correct value has been selected\r\n              if (values.length === 1 && values[0].value === newValue) return;\r\n              !isVisible && typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (modelValue && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function() {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n       selector: 'body',\r\n       padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function(isEnabled) {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData, tipElement, tipContainer, tipScope;\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent, after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          after ? after.after(tipElement) : parent.prepend(tipElement);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n\t\t  setTimeout(function(){\r\n\t\t\t  // Now, apply placement\r\n\t\t\t  $tooltip.$applyPlacement();\r\n\r\n\t\t\t  // Once placed, animate it.\r\n\t\t\t  // Support v1.2+ $animate\r\n\t\t\t  // https://github.com/angular/angular.js/issues/11713\r\n\t\t\t  if(angular.version.minor <= 2) {\r\n\t\t\t\t$animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n\t\t\t  } else {\r\n\t\t\t\t$animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n\t\t\t  }\r\n\t\t\t  safeDigest(scope);\r\n\r\n\t\t\t  $$rAF(function () {\r\n\t\t\t\t// Once the tooltip is placed and the animation starts, make the tooltip visible\r\n\t\t\t\tif(tipElement) tipElement.css({visibility: 'visible'});\r\n\t\t\t  });\r\n\r\n\t\t\t  // Bind events\r\n\t\t\t  if(options.keyboard) {\r\n\t\t\t\tif(options.trigger !== 'focus') {\r\n\t\t\t\t  $tooltip.focus();\r\n\t\t\t\t}\r\n\t\t\t\tbindKeyboardEvents();\r\n\t\t\t  }\r\n\r\n\t\t\t  if(options.autoClose) {\r\n\t\t\t\tbindAutoCloseEvents();\r\n\t\t\t  }\r\n\t\t  });\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if(_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function(isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function(viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement,\r\n              autoToken = /\\s?auto?\\s?/i,\r\n              autoPlace  = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition(),\r\n              tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            // Determine if the vertical placement\r\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            // Determine the horizontal placement\r\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\r\n            // and flow in the opposite direction of their placement.\r\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\r\n                elementPosition.right + tipWidth > viewportPosition.width) {\r\n\r\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\r\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\r\n                elementPosition.left - tipWidth < viewportPosition.left) {\r\n\r\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents() {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents() {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation(event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0],\r\n              isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\r\n          }\r\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\r\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\r\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement(offset, placement) {\r\n          var tip = tipElement[0],\r\n              width = tip.offsetWidth,\r\n              height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\r\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop  = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top  = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth,\r\n              actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement),\r\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\r\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow(delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement() {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if($tooltip.$isShown && tipElement !== null) {\r\n            if(options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if(options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if(tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\r\n          return res.data;\r\n        }));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && $$rAF(function() {\r\n              tooltip && tooltip.$applyPlacement();\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Enabled binding support\r\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          tooltip.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes(time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          secondsFormat = $dateFormatter.secondsFormat(format),\r\n          showSeconds = $dateFormatter.showSeconds(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function() {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [],\r\n            hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [],\r\n            minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [],\r\n            second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function(value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(),\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(),\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(),\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if (!timepicker || !angular.isDefined(newValue)) return;\r\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        if(angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if(angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function(pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function(newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory(element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        }\r\n        else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function(index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function(matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function(index) {\r\n          if(options.multiple) {\r\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\r\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function() {\r\n            $select.activate(index);\r\n            if(options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function() {\r\n          if(controller.$modelValue && scope.$matches.length) {\r\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            }\r\n          } else if(scope.$activeIndex >= scope.$matches.length) {\r\n            scope.$activeIndex = options.multiple ? [] : 0;\r\n          } else if(!controller.$modelValue && !options.multiple) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function(index) {\r\n          if(options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          } else {\r\n            return scope.$activeIndex === index;\r\n          }\r\n        };\r\n\r\n        $select.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $select.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function(evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function() {\r\n          _show();\r\n          if(options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function() {\r\n          if(!options.multiple && !controller.$modelValue) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if(angular.isDefined(dataMultiple)) {\r\n          if(falseValueRegExp.test(dataMultiple))\r\n            options.multiple = false;\r\n          else\r\n            options.multiple = dataMultiple;\r\n        }\r\n\r\n        // Add support for select markup\r\n        if(element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected, index;\r\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function(value) {\r\n              index = select.$getIndex(value);\r\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\r\n        };\r\n\r\n        if(options.multiple){\r\n          controller.$isEmpty = function(value){\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function($tooltip) {\r\n\r\n      function PopoverFactory(element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if(options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n              popover && popover.$applyPlacement();\r\n            });\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n            popover && popover.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n          newValue === true ? popover.show() : popover.hide();\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          popover.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function() {\r\n\r\n          return $location.path();\r\n\r\n        }, function(newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function(li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if(options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if(regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData, modalElement, modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function() {\r\n          if($modal.$isShown) return;\r\n\r\n          var parent, after;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if(modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n          if(!$modal.$isShown) return;\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          $modal.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        function bindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        function preventEventDefault(evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement() {\r\n          if($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\r\n\r\n.factory('$$rAF', function($window, $timeout) {\r\n\r\n  var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                              $window.webkitRequestAnimationFrame ||\r\n                              $window.mozRequestAnimationFrame;\r\n\r\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                             $window.webkitCancelAnimationFrame ||\r\n                             $window.mozCancelAnimationFrame ||\r\n                             $window.webkitCancelRequestAnimationFrame;\r\n\r\n  var rafSupported = !!requestAnimationFrame;\r\n  var raf = rafSupported ?\r\n    function(fn) {\r\n      var id = requestAnimationFrame(fn);\r\n      return function() {\r\n        cancelAnimationFrame(id);\r\n      };\r\n    } :\r\n    function(fn) {\r\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n      return function() {\r\n        $timeout.cancel(timer);\r\n      };\r\n    };\r\n\r\n  raf.supported = rafSupported;\r\n\r\n  return raf;\r\n\r\n});\r\n\r\n// .factory('$$animateReflow', function($$rAF, $document) {\r\n\r\n//   var bodyEl = $document[0].body;\r\n\r\n//   return function(fn) {\r\n//     //the returned function acts as the cancellation function\r\n//     return $$rAF(function() {\r\n//       //the line below will force the browser to perform a repaint\r\n//       //so that all the animated elements within the animation frame\r\n//       //will be properly updated and drawn on screen. This is\r\n//       //required to perform multi-class CSS based animations with\r\n//       //Firefox. DO NOT REMOVE THIS LINE.\r\n//       var a = bodyEl.offsetWidth + 1;\r\n//       fn();\r\n//     });\r\n//   };\r\n\r\n// });\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            if(!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n  \r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition,\r\n          curLeft,\r\n          curCSSTop,\r\n          curTop,\r\n          curOffset,\r\n          curCSSLeft,\r\n          calculatePosition,\r\n          position = fn.css(element, 'position'),\r\n          curElem = angular.element(element),\r\n          props = {};\r\n      \r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n      \r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n      \r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n      \r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n      \r\n      if (options.top !== null ) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if ( options.left !== null ) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function($timeout) {\r\n  return function(func, wait, immediate) {\r\n    var timeout = null;\r\n    return function() {\r\n      var context = this,\r\n        args = arguments,\r\n        callNow = immediate && !timeout;\r\n      if(timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later() {\r\n        timeout = null;\r\n        if(!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if(callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function($timeout) {\r\n  return function(func, wait, options) {\r\n    var timeout = null;\r\n    options || (options = {});\r\n    return function() {\r\n      var context = this,\r\n        args = arguments;\r\n      if(!timeout) {\r\n        if(options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later() {\r\n          timeout = null;\r\n          if(options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate() {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function() { return this.hours; };\r\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function(value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function() {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop() {\r\n  }\r\n\r\n  function isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive(array, value) {\r\n    var len = array.length, str=value.toString().toLowerCase();\r\n    for (var i=0; i<len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function(config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n\r\n      var regex, setMap;\r\n\r\n      $dateParser.init = function() {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function(date) {\r\n        if(angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function(value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if(!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for(var i = 0; i < matches.length - 1; i++) {\r\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function(key, value) {\r\n        var date;\r\n\r\n        if(value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if(isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function(key, value) {\r\n        var time;\r\n\r\n        if(value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if(isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function(date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function setMapForFormat(format) {\r\n        var keys = Object.keys(setFnMap), i;\r\n        var map = [], sortedMap = [];\r\n        // Map to setFn\r\n        var clonedFormat = format;\r\n        for(i = 0; i < keys.length; i++) {\r\n          if(format.split(keys[i]).length > 1) {\r\n            var index = clonedFormat.search(keys[i]);\r\n            format = format.split(keys[i]).join('');\r\n            if(setFnMap[keys[i]]) {\r\n              map[index] = setFnMap[keys[i]];\r\n            }\r\n          }\r\n        }\r\n        // Sort result map\r\n        angular.forEach(map, function(v) {\r\n          // conditional required since angular.forEach broke around v1.2.21\r\n          // related pr: https://github.com/angular/angular.js/pull/8525\r\n          if(v) sortedMap.push(v);\r\n        });\r\n        return sortedMap;\r\n      }\r\n\r\n      function escapeReservedSymbols(text) {\r\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function regExpForFormat(format) {\r\n        var keys = Object.keys(regExpMap), i;\r\n\r\n        var re = format;\r\n        // Abstract replaces to avoid collisions\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split(keys[i]).join('${' + i + '}');\r\n        }\r\n        // Replace abstracted values\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\r\n        }\r\n        format = escapeReservedSymbols(format);\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function() {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function(format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function(lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat(format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function(date, format, lang, timezone){\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\r\n  /* jshint validthis: true */\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function(options) {\r\n\r\n    if(options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = angular.copy(options.resolve || {});\r\n    var locals = angular.copy(options.locals || {});\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function(value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      resolve.$template = $q.when(template);\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function(templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if(!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function(locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link(scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement(query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate(template) {\r\n    if(fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function(res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory(element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function(evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if(!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function(el, i) {\r\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && index > 0) index--;\r\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if(angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function() {\r\n          if(!$dropdown.$isShown) return;\r\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function() {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick(evt) {\r\n          if(evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\r\n          scope.content = newValue;\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!dropdown || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n          newValue === true ? dropdown.show() : dropdown.hide();\r\n        });\r\n\r\n        // Initialize dropdown\r\n        var dropdown = $dropdown(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (dropdown) dropdown.destroy();\r\n          options = null;\r\n          dropdown = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if(!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n\r\n          if(options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if(options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\r\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function(element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function(element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        }\r\n        else if(!self.$options.disallowToggle) {\r\n          // toogle element active status\r\n          isActive(value) ? deactivateItem(value) : activateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function() {\r\n        return self.$options.allowMultiple ? self.$targets.$active :\r\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes(index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for(var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive(value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) === -1 ? false : true;\r\n      }\r\n\r\n      function deactivateItem(value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem(value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            }\r\n            else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              }\r\n              else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          }\r\n          else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass:'active',\r\n      toggleEvent:'click'\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if(constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if(constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if(hasExoticValues) {\r\n          controller.$parsers.push(function(viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function(modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n             return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if(!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if(!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function(child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function(v) {\r\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($modal) {\r\n\r\n      function AsideFactory(config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function($window, $sce, $aside) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles){\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles){\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\r\n          if(angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function() {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length,\r\n            i = l;\r\n          if (!l) return;\r\n          for (i = l; i--;) {\r\n            if (scope.$matches[i].value === value) break;\r\n          }\r\n          if (i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function() {\r\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect)\r\n            $typeahead.activate(-1);\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function($filter) {\r\n    return function(array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function(results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      } else {\r\n        return $filter('filter')(array, expression, comparator);\r\n      }\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'false');\r\n\r\n        // Build proper bsOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) bsOptions += ':' + comparator;\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function(values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              var isVisible = typeahead.$isVisible();\r\n              isVisible && typeahead.update(values);\r\n              // Do not re-queue an update if a correct value has been selected\r\n              if (values.length === 1 && values[0].value === newValue) return;\r\n              !isVisible && typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (modelValue && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function() {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\r\n  /* jshint validthis: true */\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function(options) {\r\n\r\n    if(options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = angular.copy(options.resolve || {});\r\n    var locals = angular.copy(options.locals || {});\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function(value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      resolve.$template = $q.when(template);\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function(templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if(!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function(locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link(scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement(query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate(template) {\r\n    if(fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function(res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory(element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function(evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if(!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function(el, i) {\r\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && index > 0) index--;\r\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if(angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function() {\r\n          if(!$dropdown.$isShown) return;\r\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function() {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick(evt) {\r\n          if(evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\r\n          scope.content = newValue;\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!dropdown || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n          newValue === true ? dropdown.show() : dropdown.hide();\r\n        });\r\n\r\n        // Initialize dropdown\r\n        var dropdown = $dropdown(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (dropdown) dropdown.destroy();\r\n          options = null;\r\n          dropdown = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n       selector: 'body',\r\n       padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function(isEnabled) {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData, tipElement, tipContainer, tipScope;\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent, after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          after ? after.after(tipElement) : parent.prepend(tipElement);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n\t\t  setTimeout(function(){\r\n\t\t\t  // Now, apply placement\r\n\t\t\t  $tooltip.$applyPlacement();\r\n\r\n\t\t\t  // Once placed, animate it.\r\n\t\t\t  // Support v1.2+ $animate\r\n\t\t\t  // https://github.com/angular/angular.js/issues/11713\r\n\t\t\t  if(angular.version.minor <= 2) {\r\n\t\t\t\t$animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n\t\t\t  } else {\r\n\t\t\t\t$animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n\t\t\t  }\r\n\t\t\t  safeDigest(scope);\r\n\r\n\t\t\t  $$rAF(function () {\r\n\t\t\t\t// Once the tooltip is placed and the animation starts, make the tooltip visible\r\n\t\t\t\tif(tipElement) tipElement.css({visibility: 'visible'});\r\n\t\t\t  });\r\n\r\n\t\t\t  // Bind events\r\n\t\t\t  if(options.keyboard) {\r\n\t\t\t\tif(options.trigger !== 'focus') {\r\n\t\t\t\t  $tooltip.focus();\r\n\t\t\t\t}\r\n\t\t\t\tbindKeyboardEvents();\r\n\t\t\t  }\r\n\r\n\t\t\t  if(options.autoClose) {\r\n\t\t\t\tbindAutoCloseEvents();\r\n\t\t\t  }\r\n\t\t  });\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if(_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function(isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function(viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement,\r\n              autoToken = /\\s?auto?\\s?/i,\r\n              autoPlace  = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition(),\r\n              tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            // Determine if the vertical placement\r\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            // Determine the horizontal placement\r\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\r\n            // and flow in the opposite direction of their placement.\r\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\r\n                elementPosition.right + tipWidth > viewportPosition.width) {\r\n\r\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\r\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\r\n                elementPosition.left - tipWidth < viewportPosition.left) {\r\n\r\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents() {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents() {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation(event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0],\r\n              isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\r\n          }\r\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\r\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\r\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement(offset, placement) {\r\n          var tip = tipElement[0],\r\n              width = tip.offsetWidth,\r\n              height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\r\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop  = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top  = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth,\r\n              actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement),\r\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\r\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow(delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement() {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if($tooltip.$isShown && tipElement !== null) {\r\n            if(options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if(options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if(tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\r\n          return res.data;\r\n        }));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && $$rAF(function() {\r\n              tooltip && tooltip.$applyPlacement();\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Enabled binding support\r\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          tooltip.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes(time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          secondsFormat = $dateFormatter.secondsFormat(format),\r\n          showSeconds = $dateFormatter.showSeconds(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function() {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [],\r\n            hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [],\r\n            minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [],\r\n            second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function(value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(),\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(),\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(),\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if (!timepicker || !angular.isDefined(newValue)) return;\r\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        if(angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if(angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function(pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function(newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory(element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        }\r\n        else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function(index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function(matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function(index) {\r\n          if(options.multiple) {\r\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\r\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function() {\r\n            $select.activate(index);\r\n            if(options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function() {\r\n          if(controller.$modelValue && scope.$matches.length) {\r\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            }\r\n          } else if(scope.$activeIndex >= scope.$matches.length) {\r\n            scope.$activeIndex = options.multiple ? [] : 0;\r\n          } else if(!controller.$modelValue && !options.multiple) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function(index) {\r\n          if(options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          } else {\r\n            return scope.$activeIndex === index;\r\n          }\r\n        };\r\n\r\n        $select.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $select.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function(evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function() {\r\n          _show();\r\n          if(options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function() {\r\n          if(!options.multiple && !controller.$modelValue) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if(angular.isDefined(dataMultiple)) {\r\n          if(falseValueRegExp.test(dataMultiple))\r\n            options.multiple = false;\r\n          else\r\n            options.multiple = dataMultiple;\r\n        }\r\n\r\n        // Add support for select markup\r\n        if(element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected, index;\r\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function(value) {\r\n              index = select.$getIndex(value);\r\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\r\n        };\r\n\r\n        if(options.multiple){\r\n          controller.$isEmpty = function(value){\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function($tooltip) {\r\n\r\n      function PopoverFactory(element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if(options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n              popover && popover.$applyPlacement();\r\n            });\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n            popover && popover.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n          newValue === true ? popover.show() : popover.hide();\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          popover.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function() {\r\n\r\n          return $location.path();\r\n\r\n        }, function(newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function(li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if(options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if(regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData, modalElement, modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function() {\r\n          if($modal.$isShown) return;\r\n\r\n          var parent, after;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if(modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n          if(!$modal.$isShown) return;\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          $modal.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        function bindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        function preventEventDefault(evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement() {\r\n          if($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\r\n\r\n.factory('$$rAF', function($window, $timeout) {\r\n\r\n  var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                              $window.webkitRequestAnimationFrame ||\r\n                              $window.mozRequestAnimationFrame;\r\n\r\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                             $window.webkitCancelAnimationFrame ||\r\n                             $window.mozCancelAnimationFrame ||\r\n                             $window.webkitCancelRequestAnimationFrame;\r\n\r\n  var rafSupported = !!requestAnimationFrame;\r\n  var raf = rafSupported ?\r\n    function(fn) {\r\n      var id = requestAnimationFrame(fn);\r\n      return function() {\r\n        cancelAnimationFrame(id);\r\n      };\r\n    } :\r\n    function(fn) {\r\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n      return function() {\r\n        $timeout.cancel(timer);\r\n      };\r\n    };\r\n\r\n  raf.supported = rafSupported;\r\n\r\n  return raf;\r\n\r\n});\r\n\r\n// .factory('$$animateReflow', function($$rAF, $document) {\r\n\r\n//   var bodyEl = $document[0].body;\r\n\r\n//   return function(fn) {\r\n//     //the returned function acts as the cancellation function\r\n//     return $$rAF(function() {\r\n//       //the line below will force the browser to perform a repaint\r\n//       //so that all the animated elements within the animation frame\r\n//       //will be properly updated and drawn on screen. This is\r\n//       //required to perform multi-class CSS based animations with\r\n//       //Firefox. DO NOT REMOVE THIS LINE.\r\n//       var a = bodyEl.offsetWidth + 1;\r\n//       fn();\r\n//     });\r\n//   };\r\n\r\n// });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            if(!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n  \r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition,\r\n          curLeft,\r\n          curCSSTop,\r\n          curTop,\r\n          curOffset,\r\n          curCSSLeft,\r\n          calculatePosition,\r\n          position = fn.css(element, 'position'),\r\n          curElem = angular.element(element),\r\n          props = {};\r\n      \r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n      \r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n      \r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n      \r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n      \r\n      if (options.top !== null ) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if ( options.left !== null ) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function($timeout) {\r\n  return function(func, wait, immediate) {\r\n    var timeout = null;\r\n    return function() {\r\n      var context = this,\r\n        args = arguments,\r\n        callNow = immediate && !timeout;\r\n      if(timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later() {\r\n        timeout = null;\r\n        if(!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if(callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function($timeout) {\r\n  return function(func, wait, options) {\r\n    var timeout = null;\r\n    options || (options = {});\r\n    return function() {\r\n      var context = this,\r\n        args = arguments;\r\n      if(!timeout) {\r\n        if(options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later() {\r\n          timeout = null;\r\n          if(options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate() {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function() { return this.hours; };\r\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function(value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function() {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop() {\r\n  }\r\n\r\n  function isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive(array, value) {\r\n    var len = array.length, str=value.toString().toLowerCase();\r\n    for (var i=0; i<len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function(config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n\r\n      var regex, setMap;\r\n\r\n      $dateParser.init = function() {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function(date) {\r\n        if(angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function(value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if(!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for(var i = 0; i < matches.length - 1; i++) {\r\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function(key, value) {\r\n        var date;\r\n\r\n        if(value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if(isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function(key, value) {\r\n        var time;\r\n\r\n        if(value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if(isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function(date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function setMapForFormat(format) {\r\n        var keys = Object.keys(setFnMap), i;\r\n        var map = [], sortedMap = [];\r\n        // Map to setFn\r\n        var clonedFormat = format;\r\n        for(i = 0; i < keys.length; i++) {\r\n          if(format.split(keys[i]).length > 1) {\r\n            var index = clonedFormat.search(keys[i]);\r\n            format = format.split(keys[i]).join('');\r\n            if(setFnMap[keys[i]]) {\r\n              map[index] = setFnMap[keys[i]];\r\n            }\r\n          }\r\n        }\r\n        // Sort result map\r\n        angular.forEach(map, function(v) {\r\n          // conditional required since angular.forEach broke around v1.2.21\r\n          // related pr: https://github.com/angular/angular.js/pull/8525\r\n          if(v) sortedMap.push(v);\r\n        });\r\n        return sortedMap;\r\n      }\r\n\r\n      function escapeReservedSymbols(text) {\r\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function regExpForFormat(format) {\r\n        var keys = Object.keys(regExpMap), i;\r\n\r\n        var re = format;\r\n        // Abstract replaces to avoid collisions\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split(keys[i]).join('${' + i + '}');\r\n        }\r\n        // Replace abstracted values\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\r\n        }\r\n        format = escapeReservedSymbols(format);\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function() {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function(format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function(lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat(format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function(date, format, lang, timezone){\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if(!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n\r\n          if(options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if(options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\r\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function(element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function(element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        }\r\n        else if(!self.$options.disallowToggle) {\r\n          // toogle element active status\r\n          isActive(value) ? deactivateItem(value) : activateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function() {\r\n        return self.$options.allowMultiple ? self.$targets.$active :\r\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes(index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for(var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive(value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) === -1 ? false : true;\r\n      }\r\n\r\n      function deactivateItem(value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem(value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            }\r\n            else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              }\r\n              else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          }\r\n          else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass:'active',\r\n      toggleEvent:'click'\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if(constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if(constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if(hasExoticValues) {\r\n          controller.$parsers.push(function(viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function(modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n             return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if(!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if(!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function(child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function(v) {\r\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($modal) {\r\n\r\n      function AsideFactory(config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function($window, $sce, $aside) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles){\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles){\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\r\n          if(angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}