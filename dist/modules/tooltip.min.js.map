{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","isNative","TooltipFactory","promise","$tooltip","$bsCompiler","compile","options","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","scope","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","element","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","$window","$applyPlacement","$animate","$$rAF","enterAnimateCallback","_blur","version","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","stopPropagation","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isString","tooltip","transclusion","falseValueRegExp","key","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          $window.setTimeout(function () {\r\n              // Now, apply placement\r\n              $tooltip.$applyPlacement();\r\n\r\n              // Once placed, animate it.\r\n              // Support v1.2+ $animate\r\n              // https://github.com/angular/angular.js/issues/11713\r\n              if (angular.version.minor <= 2) {\r\n                $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n              } else {\r\n                $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n              }\r\n              safeDigest(scope);\r\n\r\n              $$rAF(function () {\r\n                // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n                bindAutoCloseEvents();\r\n              }\r\n          });\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}