{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","$get","isNative","isTouch","DatepickerFactory","$datepicker","options","$options","pickerViews","views","el","selected","date","element","focus","viewDate","scope","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","value","$toggleMode","setMode","select","isDate","$build","length","updateDisabledDates","disabledDateRanges","dateRanges","$date","forEach","i","$dateValue","controller","$setViewValue","copy","$render","hide","keep","Date","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","rows","built","$isSelected","$setDisabledEl","disabled","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$scope","link","require","$window","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","key","isDefined","$eval","bsKey","lang","format","dateParser","$dateParser","strict","bsShow","isString","newValue","$watch","oldValue","match","validateAgainstMinMaxDate","$observe","disabledDates","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","parse","split","size","arrays","mod","n","m","arr","splice","$dateFormatter","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","getMonth","update","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","push","isToday","toDateString","today","muted","label","title","showLabels","labels","time","isSelected","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function (mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n            } else {\r\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function (blur) {\r\n          if (!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {month: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n            }\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualTime = picker.$date.getTime();\r\n            var newDate;\r\n\r\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {year: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n            }\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {year: 12},\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n            }\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}