{"version":3,"sources":["modules/affix.js"],"names":["angular","windowEl","$window","defaults","AffixFactory","offsetTop","$affix","inlineStyles","options","this","$get","reset","debounce","dimensions","initialOffsetTop","config","getRequiredAffixClass","_unpin","position","top","scrollTop","getScrollTop","scrollHeight","getScrollHeight","targetEl","offsetBottom","elementHeight","initialAffixTop","pageYOffset","directive","document","extend","affixed","target","unpin","parent","element","offsetParent","i","match","init","$parseOffsets","on","checkPosition","require","checkPositionWithEventLoop","offset","destroy","style","width","off","affix","setTimeout","setWidth","height","css","offsetUnpin","bodyEl","offsetHeight","removeClass","addClass","offsetWidth","$onResize","$debouncedOnResize","initialPosition","restrict","body","affixTarget","$element","forEach","link","key","scope","option","$on","attr","test","controller"],"mappings":"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","file":"modules/affix.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n"],"sourceRoot":"/source/"}